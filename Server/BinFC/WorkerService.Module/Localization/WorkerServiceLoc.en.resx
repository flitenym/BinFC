<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Empty" xml:space="preserve">
    <value>An empty entity has been sent.</value>
  </data>
  <data name="IncorrectCronFormat" xml:space="preserve">
    <value>Invalid Cron format: {0}</value>
  </data>
  <data name="ErrorGetOccurrences" xml:space="preserve">
    <value>Error receiving the following sales service execution dates.</value>
  </data>
  <data name="CanNotStartService" xml:space="preserve">
    <value>The sales service could not be started because the cron entry in the database was not found.</value>
  </data>
  <data name="CanNotGetCronExpression" xml:space="preserve">
    <value>Failed to get cron record.</value>
  </data>
  <data name="StartHostedServer" xml:space="preserve">
    <value>The service for sending messages has started.</value>
  </data>
  <data name="StopHostedServer" xml:space="preserve">
    <value>The service for sending messages has stopped.</value>
  </data>
  <data name="SendNotificationText" xml:space="preserve">
    <value>A notification was sent to a user with a chatId {0}: {1}.</value>
  </data>
  <data name="SendNotificationError" xml:space="preserve">
    <value>Error sending messages.</value>
  </data>
  <data name="NotApproveUserInfo" xml:space="preserve">
    <value>Failure error for more than a week.</value>
  </data>
  <data name="StartService" xml:space="preserve">
    <value>Starting the service {0}.</value>
  </data>
  <data name="StopService" xml:space="preserve">
    <value>Stopping the service {0}.</value>
  </data>
  <data name="RestartService" xml:space="preserve">
    <value>Restarting the service {0}.</value>
  </data>
  <data name="StartBinanceSellDoWork" xml:space="preserve">
    <value>Starting a sale.</value>
  </data>
  <data name="SellSuccess" xml:space="preserve">
    <value>The sale was successful.</value>
  </data>
  <data name="SellUnsuccess" xml:space="preserve">
    <value>The sale was unsuccessful.</value>
  </data>
  <data name="SellWithErrors" xml:space="preserve">
    <value>The sale went wrong {0}.</value>
  </data>
  <data name="StartTransferFuturesToSpot" xml:space="preserve">
    <value>Starting the transfer of {0} from futures to spot.</value>
  </data>
  <data name="TransferSuccess" xml:space="preserve">
    <value>The transfer of {0} from futures to spot was carried out. {1}.</value>
  </data>
  <data name="TransferUnsuccess" xml:space="preserve">
    <value>The transfer of {0} from futures to spot was not carried out. {1}.</value>
  </data>
  <data name="GetExchangeInfoError" xml:space="preserve">
    <value>Error in obtaining information about the minimum requirements for symbols for translation. {0}.</value>
  </data>
  <data name="GetCurrenciesError" xml:space="preserve">
    <value>Error receiving currencies. {0}.</value>
  </data>
  <data name="CurrenciesEmpty" xml:space="preserve">
    <value>No coins for sale.</value>
  </data>
  <data name="StartSellCurrencies" xml:space="preserve">
    <value>Start selling coins {0}.</value>
  </data>
  <data name="EndSellCurrencies" xml:space="preserve">
    <value>Coin sale completed.</value>
  </data>
  <data name="StartDustSell" xml:space="preserve">
    <value>We are starting to transfer coins with a small balance to BNB.</value>
  </data>
  <data name="StartDustSellSuccess" xml:space="preserve">
    <value>The transfer of coins with a small balance to BNB is finished.</value>
  </data>
  <data name="StartDustSellUnsuccess" xml:space="preserve">
    <value>The transfer of coins with a small balance to BNB is finished. {0}</value>
  </data>
  <data name="SellCurrency" xml:space="preserve">
    <value>Sale {0}</value>
  </data>
  <data name="GetCurrencyUnsuccess" xml:space="preserve">
    <value>Sale {0}: unsuccessful receipt of currency. {1}.</value>
  </data>
  <data name="StartNotDustCurrency" xml:space="preserve">
    <value>Sale {0}: make a sale.</value>
  </data>
  <data name="SellNotDustCurrency" xml:space="preserve">
    <value>Sale {0}:{1} the sale was completed by {2}. {3}.</value>
  </data>
  <data name="NotificationMessageText" xml:space="preserve">
    <value>Message to the administrator:{0}{1}.</value>
  </data>
  <data name="NotificationDisabled" xml:space="preserve">
    <value>Notifications are disabled.</value>
  </data>
  <data name="NotFoundAdmins" xml:space="preserve">
    <value>No administrators found to send the notification.</value>
  </data>
  <data name="SendedNotification" xml:space="preserve">
    <value>A notification has been sent to the user {adminChatId}: {message}.</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>not</value>
  </data>
</root>