<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AcceptedPurse" xml:space="preserve">
    <value>Кошелек принят.</value>
  </data>
  <data name="AcceptEmail" xml:space="preserve">
    <value>Ваш указанный e-mail принят.</value>
  </data>
  <data name="AcceptEmailWithExisted" xml:space="preserve">
    <value>Ваш указанный e-mail принят. E-mail был указан: {0}</value>
  </data>
  <data name="AcceptName" xml:space="preserve">
    <value>Ваше указанное ФИ принято.</value>
  </data>
  <data name="AcceptNameWithExisted" xml:space="preserve">
    <value>Ваше указанное ФИ принято. ФИ было указано: {0}</value>
  </data>
  <data name="AlreadyInputIdCommand" xml:space="preserve">
    <value>Вы уже привязаны к базе. Укажите команду для просмотра кабинета: {0}</value>
  </data>
  <data name="BepButton" xml:space="preserve">
    <value>BEP-20</value>
  </data>
  <data name="ChatIdExist" xml:space="preserve">
    <value>Указанный Id уже зарегестрирован в базе. Повторите снова, указав команду: {0}</value>
  </data>
  <data name="ChoosePurse" xml:space="preserve">
    <value>Выберите кошелек.</value>
  </data>
  <data name="ErrorTextToSendAdmin" xml:space="preserve">
    <value>Произошла ошибка, обратитесь к Администратору.</value>
  </data>
  <data name="IdNotRegister" xml:space="preserve">
    <value>Данный Id не зарегистрирован в базе. Администратор проверит данные и вам придет сообщение.</value>
  </data>
  <data name="IdUnspecified" xml:space="preserve">
    <value>Id не указан, привяжите сперва Id. Указать Id можно написав команду: {0}</value>
  </data>
  <data name="IncorrectId" xml:space="preserve">
    <value>Неверно введен Id. Попробуйте снова.</value>
  </data>
  <data name="InputBep" xml:space="preserve">
    <value>Введите BEP кошелек.</value>
  </data>
  <data name="InputEmail" xml:space="preserve">
    <value>Введите e-mail.</value>
  </data>
  <data name="InputEmailEmpty" xml:space="preserve">
    <value>E-mail пустой. Повторите снова, указав команду: {0}</value>
  </data>
  <data name="InputId" xml:space="preserve">
    <value>Введите Id.</value>
  </data>
  <data name="InputName" xml:space="preserve">
    <value>Введите ФИ.</value>
  </data>
  <data name="InputNameEmpty" xml:space="preserve">
    <value>ФИ пустое. Повторите снова, указав команду: {0}</value>
  </data>
  <data name="InputTrc" xml:space="preserve">
    <value>Введите TRC кошелек.</value>
  </data>
  <data name="Operations" xml:space="preserve">
    <value>Доступные команды:
Указание Id: {0}
Изменение кошелька: {1}
Указание ФИ: {2}
Указание e-mail: {3}
Личный кабинет: {4}</value>
  </data>
  <data name="PrivateBep" xml:space="preserve">
    <value>BEP-20: {0}</value>
  </data>
  <data name="PrivateEmail" xml:space="preserve">
    <value>E-mail: {0}</value>
  </data>
  <data name="PrivateId" xml:space="preserve">
    <value>ИД: {0}</value>
  </data>
  <data name="PrivateName" xml:space="preserve">
    <value>ФИ: {0}</value>
  </data>
  <data name="PrivateTrc" xml:space="preserve">
    <value>TRC-20: {0}</value>
  </data>
  <data name="StartCommand" xml:space="preserve">
    <value>Добро пожаловать! Я буду помогать в регистрации Fat Camel!
Для получения списка комманд напишите "{0}" или нажмите на кнопку.</value>
  </data>
  <data name="StatusApprove" xml:space="preserve">
    <value>Статус: активирован.</value>
  </data>
  <data name="StatusNotApprove" xml:space="preserve">
    <value>Статус: неактивирован.</value>
  </data>
  <data name="TrcButton" xml:space="preserve">
    <value>TRC-20</value>
  </data>
</root>